name: Automatic versioning based on pull request title

on:
  pull_request:
    branches:
      - master
    types:
      - opened
      - edited

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Taskfile
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install modules
        run: task install

      - name: Lint code
        run: task lint

      - name: Test code
        run: task test

      - name: Configure git
        run: |
          git config --global user.email "ci@journify.io"
          git config --global user.name "Journify CI bot"
          git checkout ${{ github.head_ref }}

      - name: Update version
        id: versioning
        run: |
          pull_request_title="${{ github.event.pull_request.title }}"
          new_version_regex='(\[MAJOR\]|\[MINOR\]|\[PATCH\])\ .+'
          new_version="false"

          if [[ $pull_request_title =~ $new_version_regex ]]; then
            echo "new_version=true" >> $GITHUB_OUTPUT
          
            major_regex='\[MAJOR\]\ .+'
            minor_regex='\[MINOR\]\ .+'
            patch_regex='\[PATCH\]\ .+'

            if [[ $pull_request_title =~ $major_regex ]]; then
              echo "bump=major" >> $GITHUB_OUTPUT
            elif [[ $pull_request_title =~ $minor_regex ]]; then
              echo "bump=minor" >> $GITHUB_OUTPUT
            elif [[ $pull_request_title =~ $patch_regex ]]; then
              echo "bump=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate version tag
        id: next_version
        if: steps.versioning.outputs.new_version == 'true'
        uses: zwaldowski/semver-release-action@v3
        with:
          dry_run: true
          bump: ${{ steps.versioning.outputs.bump }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version on file
        if: steps.versioning.outputs.new_version == 'true'
        run: |
          ./scripts/update_version.sh ${{ steps.next_version.outputs.version }}
          git add .
          git commit -m "Update version.py"
          git push

      - name: Push git tag
        if: steps.versioning.outputs.new_version == 'true'
        run: |
          tag_name="v${{ steps.next_version.outputs.version }}"
          git tag -a $tag_name -m "New version $tag_name"
          git push origin $tag_name